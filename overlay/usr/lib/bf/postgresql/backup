#!/usr/bin/with-contenv sh

set -euo pipefail
export BF_E=`basename ${0}`


#======================================================================================================================
# Set variables.
#======================================================================================================================

DATE=$(date '+%Y%m%d%H%M')
bf-debug "Backup: ${DATE}."


#======================================================================================================================
# Create temporary directory for backups.
#======================================================================================================================

TEMP_BACKUP_PATH=$(mktemp -d -t backup.XXXXXX) || bf-error "Unable to make temporary backup directory."
bf-echo "Backing up server to ${TEMP_BACKUP_PATH}..."


#======================================================================================================================
# Dump database cluster and compress.
#======================================================================================================================

# dump cluster
DUMP_FILE="${TEMP_BACKUP_PATH}/${POSTGRESQL_BACKUP_FILENAME}.sql"
bf-debug " .. dumping cluster"
pg_dumpall > "${DUMP_FILE}"

# compress file
if [ "${POSTGRESQL_BACKUP_COMPRESS_FILES}" = "1" ] ; then
    bf-debug " .. compressing cluster backup"
    gzip ${DUMP_FILE}
fi


#======================================================================================================================
# Get list of individual databases, dump and compress.
#======================================================================================================================

# remove header / footer from output
EXCLUDE="postgres|template0|template1"
bf-debug " .. excluding ${EXCLUDE} from individual backups"
DATABASES=$(psql -c "SELECT datname FROM pg_database;" | tail -n+3 | head -n-2 | grep -v -E "(${EXCLUDE})")

# dump each database
for DATABASE in ${DATABASES} ; do

    # path to this database dump
    DUMP_FILE="${TEMP_BACKUP_PATH}/${DATABASE}.sql"

    # dump database and continue on failure
    bf-debug " .. dumping database '${DATABASE}'"
    pg_dump ${DATABASE} > ${DUMP_FILE}|| true

    # compress file
    [[ "${POSTGRESQL_BACKUP_COMPRESS_FILES}" = "1" ]] && gzip ${DUMP_FILE}

done
bf-done




#======================================================================================================================
# Move backups to backup directory.
#======================================================================================================================

BACKUP_PATH=${POSTGRESQL_BACKUP}/${DATE}
bf-echo "Moving backups to ${BACKUP_PATH}..."
mv ${TEMP_BACKUP_PATH} ${BACKUP_PATH}
bf-done


#======================================================================================================================
# Remove old backups.
#======================================================================================================================

if [ "${POSTGRESQL_BACKUP_KEEP_FOR_DAYS}" -gt 0 ] ; then

    bf-echo "Deleting backups older than ${POSTGRESQL_BACKUP_KEEP_FOR_DAYS} days..."
    MMIN=$((60*24*${POSTGRESQL_BACKUP_KEEP_FOR_DAYS}))
    find ${POSTGRESQL_BACKUP}/* -type d -mmin +${MMIN} | xargs rm -rf
    bf-done

fi
